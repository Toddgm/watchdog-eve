name: FunPay Scraper (Notify & Delete)

on:
  schedule:
    # Run every hour (or adjust frequency as needed)
    - cron: "0 * * * *"
  workflow_dispatch: # Allow manual trigger

jobs:
  scrape-notify-delete: # Renamed job slightly
    runs-on: ubuntu-latest
    steps:
      # STEP 1: Checkout code (Still needed for the script)
      - name: Checkout repository
        uses: actions/checkout@v4

      # STEP 2: Setup Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10" # Or your preferred version

      # STEP 3: Install Python dependencies
      - name: Install dependencies
        run: pip install requests beautifulsoup4 lxml

      # STEP 4: Run the scraper script
      # Python script now ONLY creates offers.txt if matches are found
      - name: Run scraper script
        run: |
          echo "Running funpay_scraper.py..."
          python funpay_scraper.py
          # Check if the file was created after running
          if [ -f offers.txt ]; then
            echo "Scraper finished. offers.txt created (offers found)."
            echo "--- Current offers.txt content preview ---"
            head -n 20 offers.txt
            echo "--- End of preview ---"
          else
            echo "Scraper finished. offers.txt was NOT created (no offers found)."
          fi

      # STEP 5: Send Telegram notification IF offers.txt was created
      - name: Send Telegram notification
        # Condition: Run ONLY if the offers.txt file exists (meaning offers were found)
        if: success() && runner.os == 'Linux' && hashFiles('offers.txt') != '' # More robust check for file existence and non-emptiness
        # Alternative simpler check (might run even if file is empty, but less likely now):
        # if: success() && runner.os == 'Linux' && steps.<previous_step_id>.outcome == 'success' # Check if the file exists is better
        # Let's stick to checking file existence as it's direct:
        # We'll check inside the run block for simplicity now.

        # Run block will now check existence before sending
        run: |
          # Check if file exists AND contains "Offer #" pattern (double check)
          if [ -f offers.txt ] && grep -q "Offer #" offers.txt; then
            echo "offers.txt exists and contains offers. Preparing and sending notification..."
            # Limit message size using head
            MESSAGE_CONTENT=$(head -c 4000 offers.txt)
            if [ $(wc -c < offers.txt) -gt 4000 ]; then
              MESSAGE_CONTENT="${MESSAGE_CONTENT}..."
            fi

            # Basic URL encoding
            ENCODED_MESSAGE=$(echo "$MESSAGE_CONTENT" | sed 's/%/%25/g; s/:/%3A/g; s/\//%2F/g; s/&/%26/g; s/\+/%2B/g; s/?/%3F/g; s/=/%3D/g; s/@/%40/g')
            ENCODED_MESSAGE=$(echo "$ENCODED_MESSAGE" | awk '{printf "%s%%0A", $0}' | sed 's/%0A$//') # Preserve newlines

            TEXT_PREFIX="ðŸ’° FunPay Deals Found (Price < \$50, SP >= 10M):%0A%0A"

            curl -s -X POST \
              "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              --connect-timeout 10 \
              -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
              -d "text=${TEXT_PREFIX}${ENCODED_MESSAGE}" \
              -d "disable_web_page_preview=true"

             echo # Add a newline for cleaner logs
             echo "Telegram notification attempt finished."

          else
            echo "offers.txt does not exist or contains no 'Offer #' lines. Skipping notification."
          fi
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

      # STEP 6: Cleanup offers.txt
      - name: Cleanup offers.txt
        # Run always to ensure cleanup happens even if notification step fails or is skipped
        if: always()
        run: |
          echo "Cleaning up offers.txt..."
          rm -f offers.txt # Use force to avoid error if file doesn't exist
          echo "offers.txt removed (if it existed)."
